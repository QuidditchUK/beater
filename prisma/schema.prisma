generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clubs {
  uuid    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created DateTime? @db.Timestamptz(6)
  updated DateTime? @db.Timestamptz(6)
  name    String?   @db.VarChar(255)
  slug    String?   @unique @db.VarChar
  league  String?   @db.VarChar(255)
  active  Boolean   @default(true)
  email   String?   @db.VarChar(255)
  users   users[]
}

model users {
  uuid                   String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created                DateTime?   @default(now()) @db.Timestamptz(6)
  updated                DateTime?   @default(now()) @db.Timestamptz(6)
  email                  String      @unique @db.VarChar(255)
  hashed_password        String?     @db.VarChar
  salt                   String?     @db.VarChar
  type                   String      @default("user") @db.VarChar
  first_name             String?     @db.VarChar(255)
  last_name              String?     @db.VarChar(255)
  phone                  String?     @db.VarChar(30)
  last_login             DateTime?   @db.Timestamptz(6)
  stripe_customer_id     String?     @db.VarChar(255)
  club_uuid              String?     @db.Uuid
  is_student             Boolean?
  university             String?
  clubs                  clubs?      @relation(fields: [club_uuid], references: [uuid])
  national_team_interest Boolean?
  first_team             String?     @db.VarChar(10)
  second_team            String?     @db.VarChar(10)
  third_team             String?     @db.VarChar(10)
  position               String?     @db.VarChar(20)
  playstyle              String?
  years                  Int?
  experience             String?
  scopes                 scopes[]
  transfers              transfers[]
}

model users_stripe_products {
  uuid              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created           DateTime? @default(now()) @db.Timestamptz(6)
  updated           DateTime? @default(now()) @db.Timestamptz(6)
  user_uuid         String    @db.Uuid
  stripe_product_id String    @db.VarChar(255)
}

model scopes {
  uuid      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created   DateTime? @default(now()) @db.Timestamptz(6)
  updated   DateTime? @default(now()) @db.Timestamptz(6)
  scope     String    @db.VarChar(255)
  user      users     @relation(fields: [user_uuid], references: [uuid])
  user_uuid String    @db.Uuid
}

model transfers {
  uuid           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created        DateTime?      @default(now()) @db.Timestamptz(6)
  updated        DateTime?      @default(now()) @db.Timestamptz(6)
  user_uuid      String         @db.Uuid
  prev_club_uuid String?        @db.Uuid
  new_club_uuid  String?        @db.Uuid
  status         TransferStatus @default(PENDING)
  actioned_by    String?        @db.Uuid
  reason         String?        @db.Text
  user           users          @relation(fields: [user_uuid], references: [uuid])
}

enum TransferStatus {
  PENDING
  APPROVED
  DECLINED
}
