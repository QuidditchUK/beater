generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clubs {
  uuid             String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created          DateTime?   @db.Timestamptz(6)
  updated          DateTime?   @db.Timestamptz(6)
  name             String?     @db.VarChar(255)
  slug             String?     @unique @db.VarChar
  league           String?     @db.VarChar(255)
  active           Boolean     @default(true)
  email            String?     @db.VarChar(255)
  users            users[]
  prevClubTransfer transfers[] @relation("prevClub")
  newClubTransfer  transfers[] @relation("newClub")
  teams            teams[]
}

model users {
  uuid                             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created                          DateTime? @default(now()) @db.Timestamptz(6)
  updated                          DateTime? @default(now()) @db.Timestamptz(6)
  email                            String    @unique @db.VarChar(255)
  hashed_password                  String?   @db.VarChar
  salt                             String?   @db.VarChar
  type                             String    @default("user") @db.VarChar
  first_name                       String?   @db.VarChar(255)
  last_name                        String?   @db.VarChar(255)
  phone                            String?   @db.VarChar(30)
  last_login                       DateTime? @db.Timestamptz(6)
  stripe_customer_id               String?   @db.VarChar(255)
  club_uuid                        String?   @db.Uuid
  is_student                       Boolean?
  university                       String?
  clubs                            clubs?    @relation(fields: [club_uuid], references: [uuid])
  national_team_interest           Boolean?
  first_team                       String?   @db.VarChar(10)
  second_team                      String?   @db.VarChar(10)
  third_team                       String?   @db.VarChar(10)
  position                         String?   @db.VarChar(20)
  playstyle                        String?
  years                            Int?
  experience                       String?
  scouting_window_notifications    Boolean   @default(false)
  transfer_window_notifications    Boolean   @default(false)
  event_registration_notifications Boolean   @default(false)

  scopes             scopes[]
  transfers          transfers[]
  actionedBy         transfers[]             @relation("actionedBy")
  stripe_products    users_stripe_products[]
  teams              teams_users[]
  scouting_requests  scouting_requests[]
  scoutedBy          scouting_requests[]     @relation("scoutedBy")
  notifications      notifications[]
  push_notifications push_notifications[]
}

model users_stripe_products {
  uuid              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created           DateTime?       @default(now()) @db.Timestamptz(6)
  updated           DateTime?       @default(now()) @db.Timestamptz(6)
  user_uuid         String          @db.Uuid
  stripe_product_id String          @db.VarChar(255)
  user              users?          @relation(fields: [user_uuid], references: [uuid])
  products          stripe_products @relation(fields: [stripe_product_id], references: [stripe_product_id])
}

model scopes {
  uuid      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created   DateTime? @default(now()) @db.Timestamptz(6)
  updated   DateTime? @default(now()) @db.Timestamptz(6)
  scope     String    @db.VarChar(255)
  user      users     @relation(fields: [user_uuid], references: [uuid])
  user_uuid String    @db.Uuid
}

model transfers {
  uuid           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created        DateTime?      @default(now()) @db.Timestamptz(6)
  updated        DateTime?      @default(now()) @db.Timestamptz(6)
  user_uuid      String         @db.Uuid
  prev_club_uuid String?        @db.Uuid
  new_club_uuid  String?        @db.Uuid
  status         TransferStatus @default(PENDING)
  actioned_by    String?        @db.Uuid
  reason         String?        @db.Text
  user           users          @relation(fields: [user_uuid], references: [uuid])
  prevClub       clubs?         @relation(name: "prevClub", fields: [prev_club_uuid], references: [uuid])
  newClub        clubs?         @relation(name: "newClub", fields: [new_club_uuid], references: [uuid])
  actionedBy     users?         @relation(name: "actionedBy", fields: [actioned_by], references: [uuid])
}

enum TransferStatus {
  PENDING
  APPROVED
  DECLINED
}

enum TeamType {
  CLUB
  MERC
  NATIONAL
}

enum ScoutingStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ScoutingOutcome {
  PENDING
  SUCCEEDED
  UNSUCCESSFUL
}

model system_settings {
  uuid            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created         DateTime? @default(now()) @db.Timestamptz(6)
  transfer_window Boolean?  @default(false)
}

model stripe_products {
  uuid                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created               DateTime                @default(now()) @db.Timestamptz(6)
  stripe_product_id     String                  @unique @db.VarChar(255)
  description           String                  @db.Text
  expires               String                  @db.VarChar(255)
  users_stripe_products users_stripe_products[]
}

model teams {
  uuid      String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created   DateTime?     @default(now()) @db.Timestamptz(6)
  updated   DateTime?     @default(now()) @db.Timestamptz(6)
  name      String?       @db.VarChar(255)
  type      TeamType      @default(CLUB)
  icon      String?       @db.Text
  club_uuid String?       @db.Uuid
  clubs     clubs?        @relation(fields: [club_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  users     teams_users[]
}

model teams_users {
  uuid    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created DateTime? @db.Timestamptz(6)
  updated DateTime? @db.Timestamptz(6)

  teams     teams  @relation(fields: [team_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  team_uuid String @db.Uuid
  users     users  @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  user_uuid String @db.Uuid
}

model scouting_requests {
  uuid       String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created    DateTime?        @default(now()) @db.Timestamptz(6)
  updated    DateTime?        @default(now()) @db.Timestamptz(6)
  user_uuid  String           @db.Uuid
  user       users            @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  status     ScoutingStatus   @default(PENDING)
  reason     String?          @db.Text
  event      String?          @db.Text
  number     Int?
  team       String?          @db.Text
  pronouns   String?          @db.Text
  scouted_by String?          @db.Uuid
  notes      String?          @db.Text
  scoutedBy  users?           @relation(name: "scoutedBy", fields: [scouted_by], references: [uuid])
  outcome    ScoutingOutcome? @default(PENDING)
}

model notification_types {
  type          String          @id @db.Text
  description   String          @db.Text
  notifications notifications[]
}

model notifications {
  uuid      String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created   DateTime           @default(now()) @db.Timestamptz(6)
  user_uuid String             @db.Uuid
  user      users              @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  read      Boolean            @default(false)
  read_date DateTime?          @db.Timestamptz(6)
  type_id   String             @db.Text
  type      notification_types @relation(fields: [type_id], references: [type])
  event     String?            @db.Text
}

model push_notifications {
  uuid       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  endpoint   String  @unique @db.Text
  p256dh     String  @db.Text
  auth       String  @db.Text
  user_agent String? @db.Text
  device_id  String? @db.Text
  user_uuid  String  @db.Uuid
  user       users   @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
}
